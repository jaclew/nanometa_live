diff --git a/nanometa_live/Snakefile b/nanometa_live/Snakefile
index 2071bbf..f3fa3d3 100644
--- a/nanometa_live/Snakefile
+++ b/nanometa_live/Snakefile
@@ -22,27 +22,34 @@ while len(os.listdir(config["nanopore_output_directory"])) == 0:
 print("Files found in " + str(config["nanopore_output_directory"]) + ". Starting workflow...")
 
 def create_validation_placeholders():
-	# Creates placeholder files for each of the 
-	# species of interest specified in the config file.
-	# This creates a starting point for the validation rules. 
-	path1 = os.path.join(config["main_dir"], "validation_fastas") 
-	path2 = os.path.join(config["main_dir"], "validation_fastas/placeholders")
-	# full path could not be created in one go
-	if not os.path.isdir(path1):
-		os.mkdir(path1)
-		print(path1 + ' - CREATED')
-	if not os.path.isdir(path2):
-		os.mkdir(path2)
-		print(path2 + ' - CREATED')
-	# Uses config file variable to create one file for each species.
-	for species_id in config["species_of_interest"]:
-		file_name = str(species_id)
-		file_path = os.path.join(path2, file_name) 
-		if not os.path.isfile(file_path):
-			with open(file_path, 'w') as f:
-				f.write("placeholder file")
-				print(file_path + ' - CREATED')
-	return path2
+    """
+    Creates placeholder files for each of the species of interest specified
+    in the nested config file. This creates a starting point for the validation rules.
+    """
+    # Define directories
+    path1 = os.path.join(config["main_dir"], "validation_fastas")
+    path2 = os.path.join(config["main_dir"], "validation_fastas/placeholders")
+
+    # Create directories if they don't exist
+    for path in [path1, path2]:
+        if not os.path.isdir(path):
+            os.mkdir(path)
+            print(f"{path} - CREATED")
+
+    # Loop through species of interest from the nested YAML config
+    for species in config["species_of_interest"]:
+        # Extract taxid for each species
+        species_id = species["taxid"]
+
+        # Create placeholder files
+        file_name = str(species_id)
+        file_path = os.path.join(path2, file_name)
+        if not os.path.isfile(file_path):
+            with open(file_path, 'w') as f:
+                f.write("placeholder file")
+                print(f"{file_path} - CREATED")
+
+    return path2
 
 # Path used to create a list for validation using wildcards.
 if config["blast_validation"] == True: # skips if validation=False
@@ -221,7 +228,7 @@ rule run_blast:
 	# the build_blast_db.py script.
 	input:
 		id_fasta = os.path.join(config["main_dir"], "validation_fastas/valid_seqs_{ID}.fasta"),
-		database = os.path.join(config["main_dir"], "blast_databases/{ID}.fasta.nsq")
+		database = os.path.join(config["main_dir"], "data-files/blast/{ID}.fasta.nsq")
 	output:
 		os.path.join(config["main_dir"], "blast_result_files/{ID}.txt")
 	threads: config["blast_cores"]
diff --git a/nanometa_live/nanometa_gui.py b/nanometa_live/nanometa_gui.py
index 97eb933..7cb005b 100644
--- a/nanometa_live/nanometa_gui.py
+++ b/nanometa_live/nanometa_gui.py
@@ -1188,19 +1188,25 @@ def update_sunburst(interval_trigger, filter_click, filter_value, domains):
               State('validate_box', 'value') # valiaditon option
               )
 def pathogen_update(interval_trigger, val_state):
-    # get the data, using the species list from config and the raw df
-    pathogen_list = config_contents['species_of_interest']
+    # Create a dictionary to keep track of name and taxid pairs
+    species_dict = {entry["taxid"]: entry["name"] for entry in config_contents['species_of_interest']}
+
+    # Extract taxids to create the pathogen list
+    pathogen_list = list(species_dict.keys())
+
     pathogen_info = pathogen_df(pathogen_list, raw_df)
     # Cutoff for coloring.
     dll = int(config_contents["danger_lower_limit"])
     # Deals with species of interest not present in kreport.
-    for entry in pathogen_list:
-        if entry not in pathogen_info['Tax ID'].values:
-            pathogen_info.loc[len(pathogen_info.index)] = ['not found in DB', # add pathogen name PLACEHOLDER!
-                                                            entry, # add pathogen taxID
-                                                            0, # add pathogen nr of reads
-                                                            0.0, # add percent reads for pathogens
-                                                            0] # not needed anymore, remove later
+    for taxid in pathogen_list:
+        if taxid not in pathogen_info['Tax ID'].values:
+            # Use the species name from species_dict instead of 'not found in DB'
+            species_name = species_dict[taxid]
+            pathogen_info.loc[len(pathogen_info.index)] = [species_name,  # add pathogen name
+                                                           taxid, # add pathogen taxID
+                                                           0,# add pathogen nr of reads
+                                                           0.0, # add percent reads for pathogens
+                                                           0] # not needed anymore, remove later
 
     # Adding a column for the coloring sceme.
     pathogen_info['Color'] = pathogen_info['Reads'].apply(lambda x: 'Green' if x < dll else 'Red')
diff --git a/nanometa_live/nanometa_prepare.py b/nanometa_live/nanometa_prepare.py
index b876a57..c7504e4 100644
--- a/nanometa_live/nanometa_prepare.py
+++ b/nanometa_live/nanometa_prepare.py
@@ -573,7 +573,7 @@ def rename_files(df: pd.DataFrame, workingdir: str):
                     for filename in files_in_dir:
                         if filename.endswith('.fna'):
                             source_file = os.path.join(subdirectory_path, filename)
-                            target_file = os.path.join(genomes_dir, f'{tax_id}.fna')
+                            target_file = os.path.join(genomes_dir, f'{tax_id}.fasta')
 
                             os.rename(source_file, target_file)
                             logging.info(f"Renamed {source_file} to {target_file}")
